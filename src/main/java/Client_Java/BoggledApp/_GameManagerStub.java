package Client_Java.BoggledApp;


/**
* Client_Java.BoggledApp/_GameManagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CORBA IDL.idl
* Tuesday, April 30, 2024 12:28:41 PM SGT
*/


//interface for most of the game methods
public class _GameManagerStub extends org.omg.CORBA.portable.ObjectImpl implements Client_Java.BoggledApp.GameManager
{

  public int startGame (Client_Java.BoggledApp.Player player)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startGame", true);
                Client_Java.BoggledApp.PlayerHelper.write ($out, player);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return startGame (player        );
            } finally {
                _releaseReply ($in);
            }
  } // startGame

  public int getWaitingTime (int gid)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getWaitingTime", true);
                $out.write_long (gid);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getWaitingTime (gid        );
            } finally {
                _releaseReply ($in);
            }
  } // getWaitingTime

  public int getTotalPlayersJoined (int gid)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTotalPlayersJoined", true);
                $out.write_long (gid);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTotalPlayersJoined (gid        );
            } finally {
                _releaseReply ($in);
            }
  } // getTotalPlayersJoined

  public Client_Java.BoggledApp.Round playFirstRound (int gid)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("playFirstRound", true);
                $out.write_long (gid);
                $in = _invoke ($out);
                Client_Java.BoggledApp.Round $result = Client_Java.BoggledApp.RoundHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return playFirstRound (gid        );
            } finally {
                _releaseReply ($in);
            }
  } // playFirstRound


  //returns null if game status is false (no joined players). Otherwise, returns a round (for first round)
  public Client_Java.BoggledApp.Round submitAndLoadNextRound (String[] answersArray, int pid, int gid) throws Client_Java.BoggledApp.NoPlayersLeft
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("submitAndLoadNextRound", true);
                Client_Java.BoggledApp.StringSequenceHelper.write ($out, answersArray);
                $out.write_long (pid);
                $out.write_long (gid);
                $in = _invoke ($out);
                Client_Java.BoggledApp.Round $result = Client_Java.BoggledApp.RoundHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Client_Java.BoggledApp/NoPlayersLeft:1.0"))
                    throw Client_Java.BoggledApp.NoPlayersLeftHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return submitAndLoadNextRound (answersArray, pid, gid        );
            } finally {
                _releaseReply ($in);
            }
  } // submitAndLoadNextRound

  public Client_Java.BoggledApp.Player[] viewLeaderboards ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewLeaderboards", true);
                $in = _invoke ($out);
                Client_Java.BoggledApp.Player $result[] = Client_Java.BoggledApp.PlayerListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewLeaderboards (        );
            } finally {
                _releaseReply ($in);
            }
  } // viewLeaderboards

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Client_Java.BoggledApp/GameManager:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "Client_Java.BoggledApp._GameManagerStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GameManagerStub
